//◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆
//メイン処理 [main.cpp]
//Author : Kobayashi_Sho-hei / 小林 将兵
//◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆　◆

//=================================================
//include / 他のデータ・コードの呼び出し・利用
//=================================================
#include <crtdbg.h>
#include "main.h"
#include "manager.h"
#include "renderer.h"

//==============================================
//マクロ定義
//==============================================
#define CLASS_NAME		"AppClass"		//ウインドウのクラス名
#define WINDOW_NAME		"3Dスクロール"	//ウインドウのキャプション名

//==============================================
//プロトタイプ宣言
//==============================================
LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
extern LRESULT ImGui_ImplWin32_WndProcHandler(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);

//==============================================
//グローバル変数
//==============================================
int g_nCountFPS;	//FPSカウンタ

//==============================================
//メイン関数
//==============================================
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
	//CRTメモリリーク検出用
	_CrtSetDbgFlag(_CrtSetDbgFlag(_CRTDBG_REPORT_FLAG) | _CRTDBG_LEAK_CHECK_DF);

	CManager *pManager;
	WNDCLASSEX wcex =
	{
		sizeof(WNDCLASSEX),
		CS_CLASSDC,
		WndProc,
		0,
		0,
		hInstance,
		NULL,
		LoadCursor(NULL, IDC_ARROW),
		(HBRUSH)(COLOR_WINDOW + 1),
		NULL,
		CLASS_NAME,
		NULL
	};
	RECT rect = {0, 0, SCREEN_WIDTH, SCREEN_HEIGHT};
	HWND hWnd;
	MSG msg;
	DWORD dwCurrentTime;
	DWORD dwFrameCount;
	DWORD dwExecLastTime;
	DWORD dwFPSLastTime;
	
	//ウィンドウクラスの登録
	RegisterClassEx(&wcex);

	//指定したクライアント領域を確保するために必要なウィンドウ座標を計算
	AdjustWindowRect(&rect, WS_OVERLAPPEDWINDOW, false);

	//ウィンドウの作成
	hWnd = CreateWindow(CLASS_NAME,
						WINDOW_NAME,
						WS_OVERLAPPEDWINDOW,
						CW_USEDEFAULT,
						CW_USEDEFAULT,
						(rect.right - rect.left),
						(rect.bottom - rect.top),
						NULL,
						NULL,
						hInstance,
						NULL);
	//+ @   @   @   @   @   @   @   @   @   @   @   @
	//+						初期化・生成処理
	//+ @   @   @   @   @   @   @   @   @   @   @   @

	//マネージャー
	pManager = new CManager;
	
	//レンダリング
	if (pManager != NULL)
	{
		if (FAILED(pManager->Init(hInstance, hWnd, true)))
		{
			return -1;
		}
	}
	
	//分解能を設定
	timeBeginPeriod(1);

	//フレームカウント初期化
	dwCurrentTime =
	dwFrameCount = 0;
	dwExecLastTime = 
	dwFPSLastTime = timeGetTime();

	//ウインドウの表示
	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);
	
	//メッセージループ
	while(1)
	{
        if(PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			if(msg.message == WM_QUIT)
			{
				break;	//PostQuitMessage()が呼ばれたらループ終了
			}
			else
			{
				//メッセージの翻訳とディスパッチ
				TranslateMessage(&msg);
				DispatchMessage(&msg);
			}
        }
		else
		{
			dwCurrentTime = timeGetTime();	//現在の時間を取得
			if((dwCurrentTime - dwFPSLastTime) >= 500)	//0.5秒ごとに実行
			{
#ifdef _DEBUG
				//FPSを算出
				g_nCountFPS = dwFrameCount * 1000 / (dwCurrentTime - dwFPSLastTime);
#endif
				dwFPSLastTime = dwCurrentTime;	//現在の時間を保存
				dwFrameCount = 0;
			}

			if((dwCurrentTime - dwExecLastTime) >= (1000 / 60))	//1/60秒経過
			{
				dwExecLastTime = dwCurrentTime;	//現在の時間を保存

				//+ @   @   @   @   @   @   @   @   @   @   @   @
				//+						更新処理
				//+ @   @   @   @   @   @   @   @   @   @   @   @
				//マネージャー
				if (pManager != NULL)
				{
					pManager->Update();
				}

				//+ @   @   @   @   @   @   @   @   @   @   @   @
				//+						描画処理
				//+ @   @   @   @   @   @   @   @   @   @   @   @
				//マネージャー
				if (pManager != NULL)
				{
					pManager->Draw();
				}

				dwFrameCount++;
			}
		}
	}

	//+ @   @   @   @   @   @   @   @   @   @   @   @
	//+						終了処理
	//+ @   @   @   @   @   @   @   @   @   @   @   @
	//マネージャー
	if (pManager != NULL)
	{
		pManager->Uninit();
		delete pManager;
		pManager = NULL;
	}

	//ウィンドウクラスの登録を解除
	UnregisterClass(CLASS_NAME, wcex.hInstance);

	//分解能を戻す
	timeEndPeriod(1);

	return (int)msg.wParam;
}

//==============================================
//ウインドウプロシージャ
//==============================================
LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	if (ImGui_ImplWin32_WndProcHandler(hWnd, uMsg, wParam, lParam))
	{
		return true;
	}
	switch(uMsg)
	{
	case WM_CREATE:
		break;

	case WM_DESTROY:
		PostQuitMessage(0);
		break;

	case WM_KEYDOWN:
		switch(wParam)
		{
		case VK_ESCAPE:				//[ESC]キーが押された
			DestroyWindow(hWnd);	//ウィンドウを破棄するよう指示する
			break;
		}
		break;

	default:
		break;
	}

	return DefWindowProc(hWnd, uMsg, wParam, lParam);
}

int GetFPS(void)
{
	return g_nCountFPS;
}

